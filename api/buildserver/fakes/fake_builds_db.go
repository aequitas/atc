// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/api/buildserver"
	"github.com/concourse/atc/db"
)

type FakeBuildsDB struct {
	GetBuildStub        func(buildID int) (db.Build, bool, error)
	getBuildMutex       sync.RWMutex
	getBuildArgsForCall []struct {
		buildID int
	}
	getBuildReturns struct {
		result1 db.Build
		result2 bool
		result3 error
	}
	GetBuildEventsStub        func(buildID int, from uint) (db.EventSource, error)
	getBuildEventsMutex       sync.RWMutex
	getBuildEventsArgsForCall []struct {
		buildID int
		from    uint
	}
	getBuildEventsReturns struct {
		result1 db.EventSource
		result2 error
	}
	GetBuildInputVersionedResoucesStub        func(buildID int) (db.SavedVersionedResources, error)
	getBuildInputVersionedResoucesMutex       sync.RWMutex
	getBuildInputVersionedResoucesArgsForCall []struct {
		buildID int
	}
	getBuildInputVersionedResoucesReturns struct {
		result1 db.SavedVersionedResources
		result2 error
	}
	GetBuildOutputVersionedResoucesStub        func(buildID int) (db.SavedVersionedResources, error)
	getBuildOutputVersionedResoucesMutex       sync.RWMutex
	getBuildOutputVersionedResoucesArgsForCall []struct {
		buildID int
	}
	getBuildOutputVersionedResoucesReturns struct {
		result1 db.SavedVersionedResources
		result2 error
	}
	GetBuildResourcesStub        func(buildID int) ([]db.BuildInput, []db.BuildOutput, error)
	getBuildResourcesMutex       sync.RWMutex
	getBuildResourcesArgsForCall []struct {
		buildID int
	}
	getBuildResourcesReturns struct {
		result1 []db.BuildInput
		result2 []db.BuildOutput
		result3 error
	}
	GetAllBuildsStub        func() ([]db.Build, error)
	getAllBuildsMutex       sync.RWMutex
	getAllBuildsArgsForCall []struct{}
	getAllBuildsReturns     struct {
		result1 []db.Build
		result2 error
	}
	CreateOneOffBuildStub        func(teamID int) (db.Build, error)
	createOneOffBuildMutex       sync.RWMutex
	createOneOffBuildArgsForCall []struct {
		teamID int
	}
	createOneOffBuildReturns struct {
		result1 db.Build
		result2 error
	}
	GetConfigByBuildIDStub        func(buildID int) (atc.Config, db.ConfigVersion, error)
	getConfigByBuildIDMutex       sync.RWMutex
	getConfigByBuildIDArgsForCall []struct {
		buildID int
	}
	getConfigByBuildIDReturns struct {
		result1 atc.Config
		result2 db.ConfigVersion
		result3 error
	}
	GetTeamByNameStub        func(teamName string) (db.SavedTeam, error)
	getTeamByNameMutex       sync.RWMutex
	getTeamByNameArgsForCall []struct {
		teamName string
	}
	getTeamByNameReturns struct {
		result1 db.SavedTeam
		result2 error
	}
}

func (fake *FakeBuildsDB) GetBuild(buildID int) (db.Build, bool, error) {
	fake.getBuildMutex.Lock()
	fake.getBuildArgsForCall = append(fake.getBuildArgsForCall, struct {
		buildID int
	}{buildID})
	fake.getBuildMutex.Unlock()
	if fake.GetBuildStub != nil {
		return fake.GetBuildStub(buildID)
	} else {
		return fake.getBuildReturns.result1, fake.getBuildReturns.result2, fake.getBuildReturns.result3
	}
}

func (fake *FakeBuildsDB) GetBuildCallCount() int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return len(fake.getBuildArgsForCall)
}

func (fake *FakeBuildsDB) GetBuildArgsForCall(i int) int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return fake.getBuildArgsForCall[i].buildID
}

func (fake *FakeBuildsDB) GetBuildReturns(result1 db.Build, result2 bool, result3 error) {
	fake.GetBuildStub = nil
	fake.getBuildReturns = struct {
		result1 db.Build
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildsDB) GetBuildEvents(buildID int, from uint) (db.EventSource, error) {
	fake.getBuildEventsMutex.Lock()
	fake.getBuildEventsArgsForCall = append(fake.getBuildEventsArgsForCall, struct {
		buildID int
		from    uint
	}{buildID, from})
	fake.getBuildEventsMutex.Unlock()
	if fake.GetBuildEventsStub != nil {
		return fake.GetBuildEventsStub(buildID, from)
	} else {
		return fake.getBuildEventsReturns.result1, fake.getBuildEventsReturns.result2
	}
}

func (fake *FakeBuildsDB) GetBuildEventsCallCount() int {
	fake.getBuildEventsMutex.RLock()
	defer fake.getBuildEventsMutex.RUnlock()
	return len(fake.getBuildEventsArgsForCall)
}

func (fake *FakeBuildsDB) GetBuildEventsArgsForCall(i int) (int, uint) {
	fake.getBuildEventsMutex.RLock()
	defer fake.getBuildEventsMutex.RUnlock()
	return fake.getBuildEventsArgsForCall[i].buildID, fake.getBuildEventsArgsForCall[i].from
}

func (fake *FakeBuildsDB) GetBuildEventsReturns(result1 db.EventSource, result2 error) {
	fake.GetBuildEventsStub = nil
	fake.getBuildEventsReturns = struct {
		result1 db.EventSource
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildsDB) GetBuildInputVersionedResouces(buildID int) (db.SavedVersionedResources, error) {
	fake.getBuildInputVersionedResoucesMutex.Lock()
	fake.getBuildInputVersionedResoucesArgsForCall = append(fake.getBuildInputVersionedResoucesArgsForCall, struct {
		buildID int
	}{buildID})
	fake.getBuildInputVersionedResoucesMutex.Unlock()
	if fake.GetBuildInputVersionedResoucesStub != nil {
		return fake.GetBuildInputVersionedResoucesStub(buildID)
	} else {
		return fake.getBuildInputVersionedResoucesReturns.result1, fake.getBuildInputVersionedResoucesReturns.result2
	}
}

func (fake *FakeBuildsDB) GetBuildInputVersionedResoucesCallCount() int {
	fake.getBuildInputVersionedResoucesMutex.RLock()
	defer fake.getBuildInputVersionedResoucesMutex.RUnlock()
	return len(fake.getBuildInputVersionedResoucesArgsForCall)
}

func (fake *FakeBuildsDB) GetBuildInputVersionedResoucesArgsForCall(i int) int {
	fake.getBuildInputVersionedResoucesMutex.RLock()
	defer fake.getBuildInputVersionedResoucesMutex.RUnlock()
	return fake.getBuildInputVersionedResoucesArgsForCall[i].buildID
}

func (fake *FakeBuildsDB) GetBuildInputVersionedResoucesReturns(result1 db.SavedVersionedResources, result2 error) {
	fake.GetBuildInputVersionedResoucesStub = nil
	fake.getBuildInputVersionedResoucesReturns = struct {
		result1 db.SavedVersionedResources
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildsDB) GetBuildOutputVersionedResouces(buildID int) (db.SavedVersionedResources, error) {
	fake.getBuildOutputVersionedResoucesMutex.Lock()
	fake.getBuildOutputVersionedResoucesArgsForCall = append(fake.getBuildOutputVersionedResoucesArgsForCall, struct {
		buildID int
	}{buildID})
	fake.getBuildOutputVersionedResoucesMutex.Unlock()
	if fake.GetBuildOutputVersionedResoucesStub != nil {
		return fake.GetBuildOutputVersionedResoucesStub(buildID)
	} else {
		return fake.getBuildOutputVersionedResoucesReturns.result1, fake.getBuildOutputVersionedResoucesReturns.result2
	}
}

func (fake *FakeBuildsDB) GetBuildOutputVersionedResoucesCallCount() int {
	fake.getBuildOutputVersionedResoucesMutex.RLock()
	defer fake.getBuildOutputVersionedResoucesMutex.RUnlock()
	return len(fake.getBuildOutputVersionedResoucesArgsForCall)
}

func (fake *FakeBuildsDB) GetBuildOutputVersionedResoucesArgsForCall(i int) int {
	fake.getBuildOutputVersionedResoucesMutex.RLock()
	defer fake.getBuildOutputVersionedResoucesMutex.RUnlock()
	return fake.getBuildOutputVersionedResoucesArgsForCall[i].buildID
}

func (fake *FakeBuildsDB) GetBuildOutputVersionedResoucesReturns(result1 db.SavedVersionedResources, result2 error) {
	fake.GetBuildOutputVersionedResoucesStub = nil
	fake.getBuildOutputVersionedResoucesReturns = struct {
		result1 db.SavedVersionedResources
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildsDB) GetBuildResources(buildID int) ([]db.BuildInput, []db.BuildOutput, error) {
	fake.getBuildResourcesMutex.Lock()
	fake.getBuildResourcesArgsForCall = append(fake.getBuildResourcesArgsForCall, struct {
		buildID int
	}{buildID})
	fake.getBuildResourcesMutex.Unlock()
	if fake.GetBuildResourcesStub != nil {
		return fake.GetBuildResourcesStub(buildID)
	} else {
		return fake.getBuildResourcesReturns.result1, fake.getBuildResourcesReturns.result2, fake.getBuildResourcesReturns.result3
	}
}

func (fake *FakeBuildsDB) GetBuildResourcesCallCount() int {
	fake.getBuildResourcesMutex.RLock()
	defer fake.getBuildResourcesMutex.RUnlock()
	return len(fake.getBuildResourcesArgsForCall)
}

func (fake *FakeBuildsDB) GetBuildResourcesArgsForCall(i int) int {
	fake.getBuildResourcesMutex.RLock()
	defer fake.getBuildResourcesMutex.RUnlock()
	return fake.getBuildResourcesArgsForCall[i].buildID
}

func (fake *FakeBuildsDB) GetBuildResourcesReturns(result1 []db.BuildInput, result2 []db.BuildOutput, result3 error) {
	fake.GetBuildResourcesStub = nil
	fake.getBuildResourcesReturns = struct {
		result1 []db.BuildInput
		result2 []db.BuildOutput
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildsDB) GetAllBuilds() ([]db.Build, error) {
	fake.getAllBuildsMutex.Lock()
	fake.getAllBuildsArgsForCall = append(fake.getAllBuildsArgsForCall, struct{}{})
	fake.getAllBuildsMutex.Unlock()
	if fake.GetAllBuildsStub != nil {
		return fake.GetAllBuildsStub()
	} else {
		return fake.getAllBuildsReturns.result1, fake.getAllBuildsReturns.result2
	}
}

func (fake *FakeBuildsDB) GetAllBuildsCallCount() int {
	fake.getAllBuildsMutex.RLock()
	defer fake.getAllBuildsMutex.RUnlock()
	return len(fake.getAllBuildsArgsForCall)
}

func (fake *FakeBuildsDB) GetAllBuildsReturns(result1 []db.Build, result2 error) {
	fake.GetAllBuildsStub = nil
	fake.getAllBuildsReturns = struct {
		result1 []db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildsDB) CreateOneOffBuild(teamID int) (db.Build, error) {
	fake.createOneOffBuildMutex.Lock()
	fake.createOneOffBuildArgsForCall = append(fake.createOneOffBuildArgsForCall, struct {
		teamID int
	}{teamID})
	fake.createOneOffBuildMutex.Unlock()
	if fake.CreateOneOffBuildStub != nil {
		return fake.CreateOneOffBuildStub(teamID)
	} else {
		return fake.createOneOffBuildReturns.result1, fake.createOneOffBuildReturns.result2
	}
}

func (fake *FakeBuildsDB) CreateOneOffBuildCallCount() int {
	fake.createOneOffBuildMutex.RLock()
	defer fake.createOneOffBuildMutex.RUnlock()
	return len(fake.createOneOffBuildArgsForCall)
}

func (fake *FakeBuildsDB) CreateOneOffBuildArgsForCall(i int) int {
	fake.createOneOffBuildMutex.RLock()
	defer fake.createOneOffBuildMutex.RUnlock()
	return fake.createOneOffBuildArgsForCall[i].teamID
}

func (fake *FakeBuildsDB) CreateOneOffBuildReturns(result1 db.Build, result2 error) {
	fake.CreateOneOffBuildStub = nil
	fake.createOneOffBuildReturns = struct {
		result1 db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildsDB) GetConfigByBuildID(buildID int) (atc.Config, db.ConfigVersion, error) {
	fake.getConfigByBuildIDMutex.Lock()
	fake.getConfigByBuildIDArgsForCall = append(fake.getConfigByBuildIDArgsForCall, struct {
		buildID int
	}{buildID})
	fake.getConfigByBuildIDMutex.Unlock()
	if fake.GetConfigByBuildIDStub != nil {
		return fake.GetConfigByBuildIDStub(buildID)
	} else {
		return fake.getConfigByBuildIDReturns.result1, fake.getConfigByBuildIDReturns.result2, fake.getConfigByBuildIDReturns.result3
	}
}

func (fake *FakeBuildsDB) GetConfigByBuildIDCallCount() int {
	fake.getConfigByBuildIDMutex.RLock()
	defer fake.getConfigByBuildIDMutex.RUnlock()
	return len(fake.getConfigByBuildIDArgsForCall)
}

func (fake *FakeBuildsDB) GetConfigByBuildIDArgsForCall(i int) int {
	fake.getConfigByBuildIDMutex.RLock()
	defer fake.getConfigByBuildIDMutex.RUnlock()
	return fake.getConfigByBuildIDArgsForCall[i].buildID
}

func (fake *FakeBuildsDB) GetConfigByBuildIDReturns(result1 atc.Config, result2 db.ConfigVersion, result3 error) {
	fake.GetConfigByBuildIDStub = nil
	fake.getConfigByBuildIDReturns = struct {
		result1 atc.Config
		result2 db.ConfigVersion
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildsDB) GetTeamByName(teamName string) (db.SavedTeam, error) {
	fake.getTeamByNameMutex.Lock()
	fake.getTeamByNameArgsForCall = append(fake.getTeamByNameArgsForCall, struct {
		teamName string
	}{teamName})
	fake.getTeamByNameMutex.Unlock()
	if fake.GetTeamByNameStub != nil {
		return fake.GetTeamByNameStub(teamName)
	} else {
		return fake.getTeamByNameReturns.result1, fake.getTeamByNameReturns.result2
	}
}

func (fake *FakeBuildsDB) GetTeamByNameCallCount() int {
	fake.getTeamByNameMutex.RLock()
	defer fake.getTeamByNameMutex.RUnlock()
	return len(fake.getTeamByNameArgsForCall)
}

func (fake *FakeBuildsDB) GetTeamByNameArgsForCall(i int) string {
	fake.getTeamByNameMutex.RLock()
	defer fake.getTeamByNameMutex.RUnlock()
	return fake.getTeamByNameArgsForCall[i].teamName
}

func (fake *FakeBuildsDB) GetTeamByNameReturns(result1 db.SavedTeam, result2 error) {
	fake.GetTeamByNameStub = nil
	fake.getTeamByNameReturns = struct {
		result1 db.SavedTeam
		result2 error
	}{result1, result2}
}

var _ buildserver.BuildsDB = new(FakeBuildsDB)
