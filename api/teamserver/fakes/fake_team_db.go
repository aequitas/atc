// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/api/teamserver"
	"github.com/concourse/atc/db"
)

type FakeTeamDB struct {
	GetTeamByNameStub        func(teamName string) (db.SavedTeam, bool, error)
	getTeamByNameMutex       sync.RWMutex
	getTeamByNameArgsForCall []struct {
		teamName string
	}
	getTeamByNameReturns struct {
		result1 db.SavedTeam
		result2 bool
		result3 error
	}
	SaveTeamStub        func(team db.Team) (db.SavedTeam, error)
	saveTeamMutex       sync.RWMutex
	saveTeamArgsForCall []struct {
		team db.Team
	}
	saveTeamReturns struct {
		result1 db.SavedTeam
		result2 error
	}
	UpdateTeamBasicAuthStub        func(team db.Team) (db.SavedTeam, error)
	updateTeamBasicAuthMutex       sync.RWMutex
	updateTeamBasicAuthArgsForCall []struct {
		team db.Team
	}
	updateTeamBasicAuthReturns struct {
		result1 db.SavedTeam
		result2 error
	}
	UpdateTeamGitHubAuthStub        func(team db.Team) (db.SavedTeam, error)
	updateTeamGitHubAuthMutex       sync.RWMutex
	updateTeamGitHubAuthArgsForCall []struct {
		team db.Team
	}
	updateTeamGitHubAuthReturns struct {
		result1 db.SavedTeam
		result2 error
	}
}

func (fake *FakeTeamDB) GetTeamByName(teamName string) (db.SavedTeam, bool, error) {
	fake.getTeamByNameMutex.Lock()
	fake.getTeamByNameArgsForCall = append(fake.getTeamByNameArgsForCall, struct {
		teamName string
	}{teamName})
	fake.getTeamByNameMutex.Unlock()
	if fake.GetTeamByNameStub != nil {
		return fake.GetTeamByNameStub(teamName)
	} else {
		return fake.getTeamByNameReturns.result1, fake.getTeamByNameReturns.result2, fake.getTeamByNameReturns.result3
	}
}

func (fake *FakeTeamDB) GetTeamByNameCallCount() int {
	fake.getTeamByNameMutex.RLock()
	defer fake.getTeamByNameMutex.RUnlock()
	return len(fake.getTeamByNameArgsForCall)
}

func (fake *FakeTeamDB) GetTeamByNameArgsForCall(i int) string {
	fake.getTeamByNameMutex.RLock()
	defer fake.getTeamByNameMutex.RUnlock()
	return fake.getTeamByNameArgsForCall[i].teamName
}

func (fake *FakeTeamDB) GetTeamByNameReturns(result1 db.SavedTeam, result2 bool, result3 error) {
	fake.GetTeamByNameStub = nil
	fake.getTeamByNameReturns = struct {
		result1 db.SavedTeam
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTeamDB) SaveTeam(team db.Team) (db.SavedTeam, error) {
	fake.saveTeamMutex.Lock()
	fake.saveTeamArgsForCall = append(fake.saveTeamArgsForCall, struct {
		team db.Team
	}{team})
	fake.saveTeamMutex.Unlock()
	if fake.SaveTeamStub != nil {
		return fake.SaveTeamStub(team)
	} else {
		return fake.saveTeamReturns.result1, fake.saveTeamReturns.result2
	}
}

func (fake *FakeTeamDB) SaveTeamCallCount() int {
	fake.saveTeamMutex.RLock()
	defer fake.saveTeamMutex.RUnlock()
	return len(fake.saveTeamArgsForCall)
}

func (fake *FakeTeamDB) SaveTeamArgsForCall(i int) db.Team {
	fake.saveTeamMutex.RLock()
	defer fake.saveTeamMutex.RUnlock()
	return fake.saveTeamArgsForCall[i].team
}

func (fake *FakeTeamDB) SaveTeamReturns(result1 db.SavedTeam, result2 error) {
	fake.SaveTeamStub = nil
	fake.saveTeamReturns = struct {
		result1 db.SavedTeam
		result2 error
	}{result1, result2}
}

func (fake *FakeTeamDB) UpdateTeamBasicAuth(team db.Team) (db.SavedTeam, error) {
	fake.updateTeamBasicAuthMutex.Lock()
	fake.updateTeamBasicAuthArgsForCall = append(fake.updateTeamBasicAuthArgsForCall, struct {
		team db.Team
	}{team})
	fake.updateTeamBasicAuthMutex.Unlock()
	if fake.UpdateTeamBasicAuthStub != nil {
		return fake.UpdateTeamBasicAuthStub(team)
	} else {
		return fake.updateTeamBasicAuthReturns.result1, fake.updateTeamBasicAuthReturns.result2
	}
}

func (fake *FakeTeamDB) UpdateTeamBasicAuthCallCount() int {
	fake.updateTeamBasicAuthMutex.RLock()
	defer fake.updateTeamBasicAuthMutex.RUnlock()
	return len(fake.updateTeamBasicAuthArgsForCall)
}

func (fake *FakeTeamDB) UpdateTeamBasicAuthArgsForCall(i int) db.Team {
	fake.updateTeamBasicAuthMutex.RLock()
	defer fake.updateTeamBasicAuthMutex.RUnlock()
	return fake.updateTeamBasicAuthArgsForCall[i].team
}

func (fake *FakeTeamDB) UpdateTeamBasicAuthReturns(result1 db.SavedTeam, result2 error) {
	fake.UpdateTeamBasicAuthStub = nil
	fake.updateTeamBasicAuthReturns = struct {
		result1 db.SavedTeam
		result2 error
	}{result1, result2}
}

func (fake *FakeTeamDB) UpdateTeamGitHubAuth(team db.Team) (db.SavedTeam, error) {
	fake.updateTeamGitHubAuthMutex.Lock()
	fake.updateTeamGitHubAuthArgsForCall = append(fake.updateTeamGitHubAuthArgsForCall, struct {
		team db.Team
	}{team})
	fake.updateTeamGitHubAuthMutex.Unlock()
	if fake.UpdateTeamGitHubAuthStub != nil {
		return fake.UpdateTeamGitHubAuthStub(team)
	} else {
		return fake.updateTeamGitHubAuthReturns.result1, fake.updateTeamGitHubAuthReturns.result2
	}
}

func (fake *FakeTeamDB) UpdateTeamGitHubAuthCallCount() int {
	fake.updateTeamGitHubAuthMutex.RLock()
	defer fake.updateTeamGitHubAuthMutex.RUnlock()
	return len(fake.updateTeamGitHubAuthArgsForCall)
}

func (fake *FakeTeamDB) UpdateTeamGitHubAuthArgsForCall(i int) db.Team {
	fake.updateTeamGitHubAuthMutex.RLock()
	defer fake.updateTeamGitHubAuthMutex.RUnlock()
	return fake.updateTeamGitHubAuthArgsForCall[i].team
}

func (fake *FakeTeamDB) UpdateTeamGitHubAuthReturns(result1 db.SavedTeam, result2 error) {
	fake.UpdateTeamGitHubAuthStub = nil
	fake.updateTeamGitHubAuthReturns = struct {
		result1 db.SavedTeam
		result2 error
	}{result1, result2}
}

var _ teamserver.TeamDB = new(FakeTeamDB)
